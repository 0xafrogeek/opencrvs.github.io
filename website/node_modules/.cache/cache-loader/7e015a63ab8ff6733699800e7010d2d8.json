{"remainingRequest":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/babel-loader/lib/index.js??ref--8-1!/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/docs/core_functions/Notify_a_vital_event_44dd01fc728c4d7f8b88171d079d71d2.mdx","dependencies":[{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/docs/core_functions/Notify_a_vital_event_44dd01fc728c4d7f8b88171d079d71d2.mdx","mtime":1590596585511},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/.docusaurus/docusaurus-plugin-content-docs/site-docs-core-functions-notify-a-vital-event-44-dd-01-fc-728-c-4-d-7-f-8-b-88171-d-079-d-71-d-2-mdx-d9d.json","mtime":1590614812342},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/cache-loader/dist/cjs.js","mtime":1590575507129},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/babel-loader/lib/index.js","mtime":1590575506971},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1590575510553},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1590575509731}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2V1YW5taWxsYXIvQ2xpZW50cy9QbGFuL0RldmVsb3BtZW50L29wZW5jcnZzLmdpdGh1Yi5pby93ZWJzaXRlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSIvVXNlcnMvZXVhbm1pbGxhci9DbGllbnRzL1BsYW4vRGV2ZWxvcG1lbnQvb3BlbmNydnMuZ2l0aHViLmlvL3dlYnNpdGUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IHZhciBmcm9udE1hdHRlcj17aWQ6J25vdGlmeUFWaXRhbEV2ZW50Jyx0aXRsZTonTm90aWZ5IGEgdml0YWwgZXZlbnQnfTtleHBvcnQgdmFyIG1ldGFkYXRhPXsiaWQiOiJjb3JlX2Z1bmN0aW9ucy9ub3RpZnlBVml0YWxFdmVudCIsInRpdGxlIjoiTm90aWZ5IGEgdml0YWwgZXZlbnQiLCJkZXNjcmlwdGlvbiI6IlRoaXMgZnVuY3Rpb25hbGl0eSBhbGxvd3MgYSBSZWdpc3RyYXRpb24gQWdlbnQgb3IgYSBSZWdpc3RyYXIgdG8gdmlldyBiaXJ0aCBhbmQgZGVhdGggbm90aWZpY2F0aW9ucyBzZW50IGZyb20gZXh0ZXJuYWwgaGVhbHRoIGZhY2lsaXRpZXMuIFRoZXNlIG5vdGlmaWNhdGlvbnMgYXBwZWFyIGluIGluIHRoZSBcIkluLVByb2dyZXNzXCIgd29ya3F1ZXVlIGFzIHRoZXkgcmVxdWlyZSBmb2xsb3cgdXAgd29yayB0byBjb21wbGV0ZSBhbGwgbWFuZGF0b3J5IGZpZWxkcy4iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2NvcmVfZnVuY3Rpb25zL05vdGlmeV9hX3ZpdGFsX2V2ZW50XzQ0ZGQwMWZjNzI4YzRkN2Y4Yjg4MTcxZDA3OWQ3MWQyLm1keCIsInBlcm1hbGluayI6Ii9vcGVuY3J2cy1jb3JlL2RvY3MvY29yZV9mdW5jdGlvbnMvbm90aWZ5QVZpdGFsRXZlbnQiLCJzaWRlYmFyIjoiZG9jcyIsInByZXZpb3VzIjp7InRpdGxlIjoiQ29uZmlndXJhdGlvbiIsInBlcm1hbGluayI6Ii9vcGVuY3J2cy1jb3JlL2RvY3Mvc3lzdGVtX292ZXJ2aWV3L2NvbmZpZ3VyYXRpb24ifSwibmV4dCI6eyJ0aXRsZSI6IkRlY2xhcmUgYSB2aXRhbCBldmVudCIsInBlcm1hbGluayI6Ii9vcGVuY3J2cy1jb3JlL2RvY3MvY29yZV9mdW5jdGlvbnMvZGVjbGFyZUFWaXRhbEV2ZW50In19Oy8qIEBqc3ggbWR4ICovaW1wb3J0IHVzZUJhc2VVcmwgZnJvbSJAZG9jdXNhdXJ1cy91c2VCYXNlVXJsIjtleHBvcnQgdmFyIHJpZ2h0VG9jPVt7dmFsdWU6J0NvbmZpZ3VyYXRpb24nLGlkOidjb25maWd1cmF0aW9uJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidVc2VyIFN0b3JpZXMnLGlkOid1c2VyLXN0b3JpZXMnLGNoaWxkcmVuOlt7dmFsdWU6JzxzdHJvbmc+VmlldyBub3RpZmljYXRpb25zIGZyb20gZXh0ZXJuYWwgc3lzdGVtIGUuZy4gaGVhbHRoIChESElTMik8L3N0cm9uZz4nLGlkOid2aWV3LW5vdGlmaWNhdGlvbnMtZnJvbS1leHRlcm5hbC1zeXN0ZW0tZWctaGVhbHRoLWRoaXMyJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidWaWV3IGluY29tcGxldGUgYXBwbGljYXRpb25zIHNlbnQgZnJvbSB0aGUgZmllbGQnLGlkOid2aWV3LWluY29tcGxldGUtYXBwbGljYXRpb25zLXNlbnQtZnJvbS10aGUtZmllbGQnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0NvbXBsZXRlIG5vdGlmaWNhdGlvbicsaWQ6J2NvbXBsZXRlLW5vdGlmaWNhdGlvbicsY2hpbGRyZW46W119XX1dO3ZhciBtYWtlU2hvcnRjb2RlPWZ1bmN0aW9uIG1ha2VTaG9ydGNvZGUobmFtZSl7cmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpe2NvbnNvbGUud2FybigiQ29tcG9uZW50ICIrbmFtZSsiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTtyZXR1cm4gbWR4KCJkaXYiLHByb3BzKTt9O307dmFyIGxheW91dFByb3BzPXtyaWdodFRvYzpyaWdodFRvY307dmFyIE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKXt2YXIgY29tcG9uZW50cz1fcmVmLmNvbXBvbmVudHMscHJvcHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwIixudWxsLCJUaGlzIGZ1bmN0aW9uYWxpdHkgYWxsb3dzIGEgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly93d3cubm90aW9uLnNvL1JlZ2lzdHJhdGlvbi1BZ2VudC03ZmU1ZTMxYzhmYWU0ZDM5ODFlMGQ0ZjY5NTc2YzA4NCJ9KSxtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6ImEifSwiUmVnaXN0cmF0aW9uIEFnZW50IikpLCIgb3IgYSAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL3d3dy5ub3Rpb24uc28vUmVnaXN0cmFyLTNhNjZiNmNjZjM5YjQ5NzA4YmFlYmViODAyZTFiYzFmIn0pLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToiYSJ9LCJSZWdpc3RyYXIiKSksIiB0byB2aWV3IGJpcnRoIGFuZCBkZWF0aCBub3RpZmljYXRpb25zIHNlbnQgZnJvbSBleHRlcm5hbCBoZWFsdGggZmFjaWxpdGllcy4gVGhlc2Ugbm90aWZpY2F0aW9ucyBhcHBlYXIgaW4gaW4gdGhlIFwiSW4tUHJvZ3Jlc3NcIiB3b3JrcXVldWUgYXMgdGhleSByZXF1aXJlIGZvbGxvdyB1cCB3b3JrIHRvIGNvbXBsZXRlIGFsbCBtYW5kYXRvcnkgZmllbGRzLiIpLG1keCgiaDIiLHsiaWQiOiJjb25maWd1cmF0aW9uIn0sIkNvbmZpZ3VyYXRpb24iKSxtZHgoInAiLG51bGwsIk5vdGlmaWNhdGlvbnMgY2FuIGJlIHJlY2VpdmVkIGZyb20gYW55IGV4dGVybmFsIHN5c3RlbSBhbmQgYW4gYWRkaXRpb25hbCB3b3JrcXVldWUgY2FuIGJlIGFkZGVkIHNvIHRoYXQgdXNlcnMga25vdyB3aGVyZSB0aGUgbm90aWZpY2F0aW9uIGNhbWUgZnJvbS4iKSxtZHgoInAiLG51bGwsIkluIEJhbmdsYWRlc2gsIE9wZW5DUlZTIHJlY2VpdmVzIG5vdGlmaWNhdGlvbnMgZnJvbSBESElTMi4iKSxtZHgoImgyIix7ImlkIjoidXNlci1zdG9yaWVzIn0sIlVzZXIgU3RvcmllcyIpLG1keCgicCIsbnVsbCwiQXMgYSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJIZWFsdGggV29ya2VyLCIpLCIgSSB3YW50IHRvIGJlIGFibGUgdG8gc2VuZCBub3RpZmljYXRpb25zIG9mIGJpcnRoIGFuZCBkZWF0aCBmcm9tIHRoZSBob3NwaXRhbCwgc28gdGhhdCB0aGV5IHRyaWdnZXIgdGhlIGNpdmlsIHJlZ2lzdHJhdGlvbiBwcm9jZXNzLiIpLG1keCgicCIsbnVsbCwiQXMgYSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJSZWdpc3RyYXRpb24gQWdlbnQiKSwiLCBJIHdhbnQgdG8gYmUgYWJsZSB0byBzZWUgbm90aWZpY2F0aW9ucyB0aGF0IGNvbWUgZnJvbSBleHRlcm5hbCBoZWFsdGggc3lzdGVtcyBhbmQgdXBkYXRlIHRoZW0sIHNvIHRoYXQgSSBjYW4gc2VuZCB0aGVtIGZvciBhcHByb3ZhbCB0byB0aGUgUmVnaXN0cmFyLiIpLG1keCgicCIsbnVsbCwiQXMgYSAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCJSZWdpc3RyYXIiKSwiLCBJIHdhbnQgdG8gYmUgYWJsZSB0byBzZWUgbm90aWZpY2F0aW9ucyB0aGF0IGNvbWUgZnJvbSBleHRlcm5hbCBoZWFsdGggc3lzdGVtcyBhbmQgdXBkYXRlIHRoZW0sIHNvIHRoYXQgSSBjYW4gcmVnaXN0ZXIgdGhlbS4iKSxtZHgoInAiLG51bGwsIkFzIGEgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiUmVnaXN0cmF0aW9uIEFnZW50IiksIiwgSSB3YW50IHRvIGJlIGFibGUgdG8gc2VlIGluY29tcGxldGUgYXBwbGljYXRpb25zIHRoYXQgaGF2ZSBiZWVuIHNlbnQgZnJvbSB0aGUgZmllbGQgYW5kIHVwZGF0ZSB0aGVtLCBzbyB0aGF0IEkgY2FuIHNlbmQgdGhlbSBmb3IgYXBwcm92YWwgdG8gdGhlIFJlZ2lzdHJhci4iKSxtZHgoInAiLG51bGwsIkFzIGEgIixtZHgoInN0cm9uZyIse3BhcmVudE5hbWU6InAifSwiUmVnaXN0cmFyIiksIiwgSSB3YW50IHRvIGJlIGFibGUgdG8gc2VlIGluY29tcGxldGUgYXBwbGljYXRpb25zIHRoYXQgaGF2ZSBiZWVuIHNlbnQgZnJvbSB0aGUgZmllbGQgYW5kIHVwZGF0ZSB0aGVtLCBzbyB0aGF0IEkgY2FuIHJlZ2lzdGVyIHRoZW0uIiksbWR4KCJoMSIseyJpZCI6ImZ1bmN0aW9uYWxpdHkifSwiRnVuY3Rpb25hbGl0eSIpLG1keCgiaDMiLHsiaWQiOiJ2aWV3LW5vdGlmaWNhdGlvbnMtZnJvbS1leHRlcm5hbC1zeXN0ZW0tZWctaGVhbHRoLWRoaXMyIn0sbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJoMyJ9LCJWaWV3IG5vdGlmaWNhdGlvbnMgZnJvbSBleHRlcm5hbCBzeXN0ZW0gZS5nLiBoZWFsdGggKERISVMyKSIpKSxtZHgoInAiLG51bGwsIlJlZ2lzdHJhdGlvbiBBZ2VudHMgYW5kIFJlZ2lzdHJhcnMgY2FuIHNlZSBub3RpZmljYXRpb25zIHNlbnQgZnJvbSBhbiBleHRlcm5hbCBoZWFsdGggc3lzdGVtIGluIHRoZSAiLG1keCgiZW0iLHtwYXJlbnROYW1lOiJwIn0sIkluLXByb2dyZXNzIiksIiB3b3JrcXVldWUuIFRoZXkgY2FuIGFsc28gc2VlIHdoaWNoIGhlYWx0aCBmYWNpbGl0eSB0aGV5IHdlcmUgc2VudCBmcm9tIGFuZCB3aGVuLiIpLG1keCgiaW1nIix7YWx0OiJOb3RpZnkgYSB2aXRhbCBldmVudCIsc3JjOnVzZUJhc2VVcmwoImFzc2V0cy9jb3JlX2Z1bmN0aW9ucy9Ob3RpZnlfYV92aXRhbF9ldmVudF80NGRkMDFmYzcyOGM0ZDdmOGI4ODE3MWQwNzlkNzFkMi9IZWFsdGhfTm90aWZpY2F0aW9uLnBuZyIpfSksbWR4KCJoMyIseyJpZCI6InZpZXctaW5jb21wbGV0ZS1hcHBsaWNhdGlvbnMtc2VudC1mcm9tLXRoZS1maWVsZCJ9LCJWaWV3IGluY29tcGxldGUgYXBwbGljYXRpb25zIHNlbnQgZnJvbSB0aGUgZmllbGQiKSxtZHgoInAiLG51bGwsIlJlZ2lzdHJhdGlvbiBBZ2VudHMgYW5kIFJlZ2lzdHJhcnMgY2FuIHNlZSBub3RpZmljYXRpb25zIHNlbnQgZnJvbSBmaWVsZCBhZ2VudHMgdGhhdCBkbyBub3QgaGF2ZSBhbGwgbWFuZGF0b3J5IGluZm9ybWF0aW9uIGluY2x1ZGVkIGluIHRoZSAiLG1keCgiZW0iLHtwYXJlbnROYW1lOiJwIn0sIkluLXByb2dyZXNzIiksIiB3b3JrcXVldWUuIFRoZXkgY2FuIGFsc28gc2VlIHdoaWNoIGFnZW50IHNlbnQgdGhlIGluY29tcGxldGUgYXBwbGljYXRpb24sIHdoZW4gYW5kIGZyb20gd2hlcmUuIiksbWR4KCJoMyIseyJpZCI6ImNvbXBsZXRlLW5vdGlmaWNhdGlvbiJ9LCJDb21wbGV0ZSBub3RpZmljYXRpb24iKSxtZHgoInAiLG51bGwsIkZyb20gdGhpcyB3b3JrcXVldWUgdGhlIHVzZXIgY2FuIGRvd25sb2FkIHRoZSBub3RpZmljYXRpb24sIHJldmlldyB0aGUgaW5mb3JtYXRpb24gcHJvdmlkZWQsIGFuZCB1cGRhdGUgaXQgd2l0aCB0aGUgaW5mb3JtYXRpb24gcmVxdWlyZWQgdG8gc3VibWl0IGl0IGFzIGEgY29tcGxldGUgYXBwbGljYXRpb24gb3IgcmVnaXN0ZXIgaXQuIFRvIGVuY291cmFnZSBhY3RpdmUgZm9sbG93LXVwLCB0aGV5IGNhbiBzZWUgdGhlIGNvbnRhY3QgbnVtYmVyIG9mIHRoZSBBcHBsaWNhbnQgaW4gdGhlIHdvcmtxdWV1ZSwgaXQgaXMgdGhlbiB0aGVpciByZXNwb25zaWJpbGl0eSB0byBmb2xsb3ctdXAgd2l0aCB0aGUgQXBwbGljYW50IHRvIGNvbXBsZXRlIHRoZSBtYW5kYXRvcnkgaW5mb3JtYXRpb24gYW5kIGdldCBzdXBwb3J0aW5nIGRvY3VtZW50cy4iKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/docs/core_functions/Notify_a_vital_event_44dd01fc728c4d7f8b88171d079d71d2.mdx"],"names":["React","mdx","frontMatter","id","title","metadata","useBaseUrl","rightToc","value","children","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'notifyAVitalEvent',\n\ttitle: 'Notify a vital event'\n};\nexport const metadata = {\n  \"id\": \"core_functions/notifyAVitalEvent\",\n  \"title\": \"Notify a vital event\",\n  \"description\": \"This functionality allows a Registration Agent or a Registrar to view birth and death notifications sent from external health facilities. These notifications appear in in the \\\"In-Progress\\\" workqueue as they require follow up work to complete all mandatory fields.\",\n  \"source\": \"@site/docs/core_functions/Notify_a_vital_event_44dd01fc728c4d7f8b88171d079d71d2.mdx\",\n  \"permalink\": \"/opencrvs-core/docs/core_functions/notifyAVitalEvent\",\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"Configuration\",\n    \"permalink\": \"/opencrvs-core/docs/system_overview/configuration\"\n  },\n  \"next\": {\n    \"title\": \"Declare a vital event\",\n    \"permalink\": \"/opencrvs-core/docs/core_functions/declareAVitalEvent\"\n  }\n};\n  /* @jsx mdx */\nimport useBaseUrl from \"@docusaurus/useBaseUrl\";\nexport const rightToc = [{\n  value: 'Configuration',\n  id: 'configuration',\n  children: []\n}, {\n  value: 'User Stories',\n  id: 'user-stories',\n  children: [{\n    value: '<strong>View notifications from external system e.g. health (DHIS2)</strong>',\n    id: 'view-notifications-from-external-system-eg-health-dhis2',\n    children: []\n  }, {\n    value: 'View incomplete applications sent from the field',\n    id: 'view-incomplete-applications-sent-from-the-field',\n    children: []\n  }, {\n    value: 'Complete notification',\n    id: 'complete-notification',\n    children: []\n  }]\n}];\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`This functionality allows a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.notion.so/Registration-Agent-7fe5e31c8fae4d3981e0d4f69576c084\"\n      }}><strong parentName=\"a\">{`Registration Agent`}</strong></a>{` or a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.notion.so/Registrar-3a66b6ccf39b49708baebeb802e1bc1f\"\n      }}><strong parentName=\"a\">{`Registrar`}</strong></a>{` to view birth and death notifications sent from external health facilities. These notifications appear in in the \"In-Progress\" workqueue as they require follow up work to complete all mandatory fields.`}</p>\n    <h2 {...{\n      \"id\": \"configuration\"\n    }}>{`Configuration`}</h2>\n    <p>{`Notifications can be received from any external system and an additional workqueue can be added so that users know where the notification came from.`}</p>\n    <p>{`In Bangladesh, OpenCRVS receives notifications from DHIS2.`}</p>\n    <h2 {...{\n      \"id\": \"user-stories\"\n    }}>{`User Stories`}</h2>\n    <p>{`As a `}<strong parentName=\"p\">{`Health Worker,`}</strong>{` I want to be able to send notifications of birth and death from the hospital, so that they trigger the civil registration process.`}</p>\n    <p>{`As a `}<strong parentName=\"p\">{`Registration Agent`}</strong>{`, I want to be able to see notifications that come from external health systems and update them, so that I can send them for approval to the Registrar.`}</p>\n    <p>{`As a `}<strong parentName=\"p\">{`Registrar`}</strong>{`, I want to be able to see notifications that come from external health systems and update them, so that I can register them.`}</p>\n    <p>{`As a `}<strong parentName=\"p\">{`Registration Agent`}</strong>{`, I want to be able to see incomplete applications that have been sent from the field and update them, so that I can send them for approval to the Registrar.`}</p>\n    <p>{`As a `}<strong parentName=\"p\">{`Registrar`}</strong>{`, I want to be able to see incomplete applications that have been sent from the field and update them, so that I can register them.`}</p>\n    <h1 {...{\n      \"id\": \"functionality\"\n    }}>{`Functionality`}</h1>\n    <h3 {...{\n      \"id\": \"view-notifications-from-external-system-eg-health-dhis2\"\n    }}><strong parentName=\"h3\">{`View notifications from external system e.g. health (DHIS2)`}</strong></h3>\n    <p>{`Registration Agents and Registrars can see notifications sent from an external health system in the `}<em parentName=\"p\">{`In-progress`}</em>{` workqueue. They can also see which health facility they were sent from and when.`}</p>\n    <img alt=\"Notify a vital event\" src={useBaseUrl(\"assets/core_functions/Notify_a_vital_event_44dd01fc728c4d7f8b88171d079d71d2/Health_Notification.png\")} />\n    <h3 {...{\n      \"id\": \"view-incomplete-applications-sent-from-the-field\"\n    }}>{`View incomplete applications sent from the field`}</h3>\n    <p>{`Registration Agents and Registrars can see notifications sent from field agents that do not have all mandatory information included in the `}<em parentName=\"p\">{`In-progress`}</em>{` workqueue. They can also see which agent sent the incomplete application, when and from where.`}</p>\n    <h3 {...{\n      \"id\": \"complete-notification\"\n    }}>{`Complete notification`}</h3>\n    <p>{`From this workqueue the user can download the notification, review the information provided, and update it with the information required to submit it as a complete application or register it. To encourage active follow-up, they can see the contact number of the Applicant in the workqueue, it is then their responsibility to follow-up with the Applicant to complete the mandatory information and get supporting documents.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}