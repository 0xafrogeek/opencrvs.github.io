{"remainingRequest":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/babel-loader/lib/index.js??ref--8-1!/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--8-2!/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--8-3!/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/docs/KeyFeaturesffdd41af330441e8bcbb31ac66dfa881.md","dependencies":[{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/docs/KeyFeaturesffdd41af330441e8bcbb31ac66dfa881.md","mtime":1590573055506},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/.docusaurus/docusaurus-plugin-content-docs/site-docs-key-featuresffdd-41-af-330441-e-8-bcbb-31-ac-66-dfa-881-md-532.json","mtime":1590588355502},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/cache-loader/dist/cjs.js","mtime":1590575507129},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/babel-loader/lib/index.js","mtime":1590575506971},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1590575510553},{"path":"/Users/euanmillar/Clients/Plan/Development/opencrvs.github.io/website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1590575509731}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}